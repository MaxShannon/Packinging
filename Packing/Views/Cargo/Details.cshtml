@model DbEfModel.CargoViewModel
@{
    ViewBag.Title = "产品出入库明细";
}
@section Scripts {
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/moment-with-locales.js"></script>
    <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
    <script src="https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>

    <script src="~/Scripts/bootstrap-table.js"></script>
    <link href="~/Content/bootstrap-table.css" rel="stylesheet" />
    <script src="~/Scripts/bootstrap-table-zh-CN.js"></script>
    <script type="text/javascript">

    $(function () {
        var list = new TableInit();
        list.Init();
        $('#submit').click(function() {
            list.Init();
        });

        $('#Excel').click(function () {
            $.get('@Url.Action("Excel", "Cargo")',
                {
                    Id: $("input[name='Id']").val(),
                    CargoName: $("input[name='CargoName']").val(),
                    TimeStart: $("input[name='TimeStart']").val(),
                    TimeEnd: $("input[name='TimeEnd']").val(),
                    ProjectId: $("select[name='ProjectId']").val(),
                    SupplyId: $("select[name='SupplyId']").val(),
                    CargoAreaId: $("#CargoAreaId").val()
                },
                function (filePath) {
                    //这里显示从服务器返回的数据
                    var str = filePath;
                    window.location.href = str;
                }
            );
        });

        $("#assemble").click(function () {

            if (0 == 0) {

                $("#myModalLabel").text("汇总");
                $('#myModal').modal();
                var listAssemble = new TableInitAssemble();
                listAssemble.Init();
            } else {
                $.ajax({
                    url: '@Url.Action("AssembleWeight")',
                    type: "Post",
                    data: $('#form').serialize(),
                    success: function (data) {
                        alert("总数为" + data.data);
                        @*window.location.href = '@Url.Action("Details","Cargo",new{id = Model.Id})';*@
                    },
                    error: function (data) {
                        alert(data);
                    }
                });
            }
        });


    });

    var TableInit = function () {
        var oTableInit = new Object();
        //初始化Table
        oTableInit.Init = function (data) {
            $('#list').bootstrapTable("destroy");
            $('#list').bootstrapTable({
                url: '/Cargo/Details1', //请求后台的URL（*）
                method: 'Post', //请求方式（*）
                toolbar: '#toolbar', //工具按钮用哪个容器
                striped: true, //是否显示行间隔色
                cache: true,
                pagination: true, //是否显示分页（*）
                sortable: true, //是否启用排序
                sortOrder: "asc", //排序方式

                sidePagination: "server", //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1, //初始化加载第一页，默认第一页
                pageSize: 10, //每页的记录行数（*）
                pageList: [10, 25, 50, 100], //可供选择的每页的行数（*）
                //search: false,
                contentType: "application/x-www-form-urlencoded",
                strictSearch: true,
                showColumns: true, //是否显示所有的列
                showRefresh: true, //是否显示刷新按钮
                minimumCountColumns: 2, //最少允许的列数
                clickToSelect: true, //是否启用点击选中行
                height: 670, //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "ID", //每一行的唯一标识，一般为主键列
                showToggle: true, //是否显示详细视图和列表视图的切换按钮
                cardView: false, //是否显示详细视图
                detailView: false, //是否显示父子表
                columns: [
                    {
                        checkbox: true,
                        visible: true
                    }, {
                        field: 'CargoLogId',
                        title: '记录号'
                    }, {
                        field: 'CargoName',
                        title: '产品名字'
                    }, {
                        field: 'ShipmentNo',
                        title: '批号'
                    },{
                        field: 'IsIncome',
                        title: '出入状态',
                        formatter: function (value, row, index) {
                            if (row.IsIncome === true) {
                                return '入库';
                            }
                            else {
                                return '出库';
                            }
                        }
                    }, {
                        field: 'HuotName',
                        title: '货台'
                    },  {
                        field: 'CargoInName',
                        title: '方式'
                    }, {
                        field: 'ChangeWeight',
                        title: '添加重量'
                    }, {
                        field: 'Time',
                        title: '时间',
                        formatter: function (value, row, index) { //赋予的参数
                            //如果记得时间戳是毫秒级的就需要*1000 不然就错了记得转换成整型
                            str = '';
                            if (value != undefined) {
                                var d = new Date(value.substr(6, 10) * 1000);
                                var str = formatDate(d);
                            }
                            return str;
                        } //自定义方法，添加操作按钮
                    },

                    //{
                    //    field: 'RealName',
                    //    title: '保管员'
                    //}, {
                    //    field: 'TakenName',
                    //    title: '领用人'
                    //},
                    {
                        field: 'Desc',
                        title: '备注'
                    }
                     //   {
                    //    field: 'operate',
                    //    title: '操作',
                    //    formatter: function (value, row, index) { //赋予的参数
                    //        var str = '<a class="btn btn-info" href="Storage/StorageIncomingCreate?id=' + row.Id + '">入库</a>' +
                    //            '<a class="btn btn-info" href="Storage/StorageShippingCreate?id=' + row.Id + '">出库</a>' +
                    //            '<a class="btn btn-info" href="Cargo/Details?id=' + row.Id + '">明细</a>' +
                    //            '<a class="btn btn-primary" href="Account/Edit?id=' + row.Id + '">修改</a>' +
                    //            '<a class="btn btn-warning" href="Account/Delete?id=' + row.Id + '">删除</a>';
                    //        return str;
                    //    } //自定义方法，添加操作按钮
                    //}
                ],

                rowStyle: function (row, index) {
                    var classesArr = ['success', 'info'];
                    var rowStyle;
                    if (index % 2 === 0) { //偶数行
                        rowStyle = classesArr[0];
                    } else { //奇数行
                        rowStyle = classesArr[1];
                    }
                    return { classes: rowStyle };
                }, //隔行变色


                queryParams: function (params) {
                    var temp = { //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                        limit: params.limit, //页面大小
                        offset: params.offset,
                        @*id: @Model.Id,*@
                        TimeStart: $("input[name='TimeStart']").val(),
                        TimeEnd: $("input[name='TimeEnd']").val(),
                        StateId: $("#StateId").val(),
                        HuotId: $("#HuotId").val(),
                        Huom2Id: $("#Huom2Id").val(),
                        sort: params.sort,
                        CargoId: $("#CargoId").val(),
                        sortOrder: params.order //排位命令（desc，asc）
                    };
                    return temp;
                }

            });
        };
        return oTableInit;
    };

    var TableInitAssemble = function () {
        var oTableInit = new Object();
        //初始化Table
        oTableInit.Init = function (data) {
            $('#listAssemble').bootstrapTable("destroy");
            $('#listAssemble').bootstrapTable({
                url: '/Cargo/AssLogWeight', //请求后台的URL（*）
                method: 'Post', //请求方式（*）
                toolbar: '#toolbar', //工具按钮用哪个容器
                striped: true, //是否显示行间隔色
                cache: true,
                pagination: true, //是否显示分页（*）
                sortable: true, //是否启用排序
                sortOrder: "asc", //排序方式

                sidePagination: "server", //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1, //初始化加载第一页，默认第一页
                pageSize: 10, //每页的记录行数（*）
                pageList: [10, 25, 50, 100], //可供选择的每页的行数（*）
                //search: false,
                contentType: "application/x-www-form-urlencoded",
                strictSearch: true,
                showColumns: true, //是否显示所有的列
                showRefresh: true, //是否显示刷新按钮
                minimumCountColumns: 2, //最少允许的列数
                clickToSelect: true, //是否启用点击选中行
                height: 470, //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "ID", //每一行的唯一标识，一般为主键列
                showToggle: true, //是否显示详细视图和列表视图的切换按钮
                cardView: false, //是否显示详细视图
                detailView: false, //是否显示父子表
                columns: [
                    {
                        field: 'CargoName',
                        title: '产品'
                    },
                    {
                        field: 'Weight',
                        title: '重量'
                    },

                ],

                rowStyle: function (row, index) {
                    var classesArr = ['success', 'info'];
                    var rowStyle;
                    if (index % 2 === 0) { //偶数行
                        rowStyle = classesArr[0];
                    } else { //奇数行
                        rowStyle = classesArr[1];
                    }
                    return { classes: rowStyle };
                }, //隔行变色


                queryParams: function (params) {
                    var temp = { //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                        limit: params.limit, //页面大小
                        offset: params.offset,
                        @*id: @Model.Id,*@
                        TimeStart: $("input[name='TimeStart']").val(),
                        TimeEnd: $("input[name='TimeEnd']").val(),
                        StateId: $("#StateId").val(),
                        HuotId: $("#HuotId").val(),
                        Huom2Id: $("#Huom2Id").val(),
                        sort: params.sort,
                        CargoId: $("#CargoId").val(),
                        sortOrder: params.order //排位命令（desc，asc）
                    };
                    return temp;
                }

            });
        };
        return oTableInit;
    };

    $('#TimeStart').datetimepicker({
        format: 'YYYY-MM-DD HH:mm',
        locale: moment.locale('zh-cn')
    });
    $('#TimeEnd').datetimepicker({
        format: 'YYYY-MM-DD HH:mm',
        locale: moment.locale('zh-cn')
    });

    function formatDate(now) {
        var year = now.getFullYear();
        var month = now.getMonth() + 1;
        var date = now.getDate();
        var hour = now.getHours();
        var minute = now.getMinutes();
        var second = now.getSeconds();
        return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
    }

    </script>
}


<h2>@ViewBag.Title</h2>

<form id="form" class="form-horizontal" method="post">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(a => a.Huom2Id)
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @*@Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group date col-md-12">
                        @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*@Html.LabelFor(model => model.CargoName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    <div class="input-group date col-md-9">
                        @Html.EditorFor(model => model.CargoName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CargoName, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            @Html.LabelFor(model => model.TimeStart, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-3">
                <div class="input-group date col-md-12" id="TimeStart">
                    @Html.EditorFor(model => model.TimeStart, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>

            @Html.LabelFor(model => model.TimeEnd, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-3">
                <div class="input-group date col-md-12" id="TimeEnd">
                    @Html.EditorFor(model => model.TimeEnd, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-1">状态</label>
            <div class="col-md-3">
                @Html.DropDownListFor(a => a.StateId, (IEnumerable<SelectListItem>)ViewBag.StateList, new { @class = "form-control" })
            </div>

            <label class="control-label col-md-1">仓库</label>
            <div class="col-md-3">
                @Html.DropDownListFor(a => a.HuotId, (IEnumerable<SelectListItem>)ViewBag.HuotName, new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <input type="button" value="查询" class="btn btn-default" id="submit" />
                <input type="button" value="汇总" class="btn btn-default" id="assemble">
                <input type="button" value="导出Excel" class="btn btn-default" id="Excel" />
            </div>
        </div>

    </div>
</form>

<table id="list"></table>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel"></h4>
            </div>
            <div class="modal-body">
                <table id="listAssemble"></table>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-info" data-dismiss="modal" id="Excel"><span class="glyphicon" aria-hidden="true"></span>导出Excel</button>*@
                <button type="button" class="btn btn-default" data-dismiss="modal"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span>关闭</button>
                <button type="button" id="btn_submit" class="btn btn-primary" data-dismiss="modal"><span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>保存</button>
            </div>
        </div>
    </div>
</div>

